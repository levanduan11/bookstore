package com.bookstore.entity;
// Generated 2021/12/04 14:16:32 by Hibernate Tools 4.3.5.Final

import java.util.Base64;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeSet;

import javax.persistence.*;

import net.bytebuddy.dynamic.scaffold.MethodRegistry.Handler.ForImplementation;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * Book generated by hbm2java
 */
@Entity
@Table(name = "book", catalog = "bookstoredb", uniqueConstraints = @UniqueConstraint(columnNames = "title"))
@NamedQueries({
		@NamedQuery(name = "Book.findAll",query = "select b from Book b"),
		@NamedQuery(name = "Book.findByTitle",query = "select b from Book b where b.title = :title"),
		@NamedQuery(name = "Book.countAll",query = "select count(b) from Book b "),
		@NamedQuery(name = "Book.countByCategory",query = "select count(b) from Book b  "
				+ "join Category c on b.category.categoryId=c.categoryId where c.categoryId = :cId"),
		
		@NamedQuery(name = "Book.findByCategory",query = "select b from Book b join Category c on c.categoryId = b.category.categoryId where c.categoryId = :caId"),
		@NamedQuery(name = "Book.listNew",query = "select b from Book b order by b.publishDate desc"),
		@NamedQuery(name = "Book.search",query = "select b from Book b where b.title like '%' || :keyword || '%' or "
				+ " b.author like concat('%',:keyword,'%')"
				+ "or b.description like concat('%',:keyword,'%')"
				+ "or b.price like concat('%',:keyword,'%') " ),
})
public class Book implements java.io.Serializable {

	private Integer bookId;
	private Category category;
	private String title;
	private String author;
	private String description;
	private String isbn;
	private String base64Image;
	private byte[] image;
	private float price;
	private Date publishDate;
	private Date lastUpdateTime;
	private String ratingStar;
	private Set<Review> reviews = new HashSet<Review>(0);
	private Set<OrderDetail> orderDetails = new HashSet<OrderDetail>(0);

	public Book() {
	}

	public Book(Integer bookId) {
		super();
		this.bookId = bookId;
	}

	public Book(Category category, String title, String author, String description, String isbn, byte[] image,
			float price, Date publishDate, Date lastUpdateTime) {
		this.category = category;
		this.title = title;
		this.author = author;
		this.description = description;
		this.isbn = isbn;
		this.image = image;
		this.price = price;
		this.publishDate = publishDate;
		this.lastUpdateTime = lastUpdateTime;
	}

	public Book(Category category, String title, String author, String description, String isbn, byte[] image,
			float price, Date publishDate, Date lastUpdateTime, Set<Review> reviews, Set<OrderDetail> orderDetails) {
		this.category = category;
		this.title = title;
		this.author = author;
		this.description = description;
		this.isbn = isbn;
		this.image = image;
		this.price = price;
		this.publishDate = publishDate;
		this.lastUpdateTime = lastUpdateTime;
		this.reviews = reviews;
		this.orderDetails = orderDetails;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "book_id", unique = true, nullable = false)
	public Integer getBookId() {
		return this.bookId;
	}

	public void setBookId(Integer bookId) {
		this.bookId = bookId;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "category_id", nullable = false)
	public Category getCategory() {
		return this.category;
	}

	public void setCategory(Category category) {
		this.category = category;
	}

	@Column(name = "title", unique = true, nullable = false, length = 128)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "author", nullable = false, length = 15)
	public String getAuthor() {
		return this.author;
	}

	public void setAuthor(String author) {
		this.author = author;
	}

	@Column(name = "description", nullable = false, length = 16777215)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "isbn", nullable = false, length = 45)
	public String getIsbn() {
		return this.isbn;
	}

	public void setIsbn(String isbn) {
		this.isbn = isbn;
	}

	@Column(name = "image")
	public byte[] getImage() {
		return this.image;
	}

	public void setImage(byte[] image) {
		this.image = image;
	}

	@Column(name = "price", nullable = false, precision = 12, scale = 0)
	public float getPrice() {
		return this.price;
	}

	public void setPrice(float price) {
		this.price = price;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "publish_date", nullable = false, length = 10)
	public Date getPublishDate() {
		return this.publishDate;
	}

	public void setPublishDate(Date publishDate) {
		this.publishDate = publishDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_update_time", nullable = false, length = 19)
	public Date getLastUpdateTime() {
		return this.lastUpdateTime;
	}

	public void setLastUpdateTime(Date lastUpdateTime) {
		this.lastUpdateTime = lastUpdateTime;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "book")
	public Set<Review> getReviews() {
		Set<Review>r=new TreeSet<>((r1,r2)->r2.getReviewTime().compareTo(r1.getReviewTime()));
		r.addAll(this.reviews);
		
		return r;
	}

	public void setReviews(Set<Review> reviews) {
		
		this.reviews = reviews;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "book")
	public Set<OrderDetail> getOrderDetails() {
		return this.orderDetails;
	}

	public void setOrderDetails(Set<OrderDetail> orderDetails) {
		this.orderDetails = orderDetails;
	}
	@Transient
	public void setBase64Image(String base64Image) {
		this.base64Image = base64Image;
	}
	@Transient
	public String getBase64Image() {
		this.base64Image =Base64.getEncoder().encodeToString(this.image);
		return this.base64Image;
	}
	@Transient
	public float getAverageRating() {
		float averageRating=0.0f;
		float sum=0.0f;
		if(reviews.isEmpty()) {
			return 0.0f;
		}
		for(Review review:reviews) {
			sum+=review.getRating();
		}
		averageRating=sum/(reviews.size());
		return averageRating;
	}
	
	@Transient
	public String getRatingStar() {
		float ave=getAverageRating();
		this.ratingStar=getRating(ave);
		return this.ratingStar;
	}

	
	@Transient
	public String getRating(float aver) {
		String result="";
		int numon=(int)aver;
		for (int i = 0; i < numon; i++) {
			if (i==4) {
				result+="on";
				return result;
			}else {
				result+="on,";
			}
		
		}
		int next=numon+1;
		if(aver>numon) {
			next+=1;
			if(aver+1>5) {
				result+="half";
				return result;
			}
			result+="half,";
			
		}
		for (int i =next; i <=5; i++) {
			if(i==5) {
				result+="off";
			}else {
				result+="off,";
			}
			
		}
		return result;
		
	}
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((bookId == null) ? 0 : bookId.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Book other = (Book) obj;
		if (bookId == null) {
			if (other.bookId != null)
				return false;
		} else if (!bookId.equals(other.bookId))
			return false;
		return true;
	}

	
}
